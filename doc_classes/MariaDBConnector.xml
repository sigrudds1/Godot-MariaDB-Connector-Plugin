<?xml version="1.0" encoding="UTF-8" ?>
<class name="MariaDBConnector" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Allows connection to a MariaDB server and running queries from GDScript.
	</brief_description>
	<description>
		MariaDBConnector enables you to connect to a MariaDB server using a TCP connection. You can send SQL queries, receive results, and manage the connection state directly from GDScript.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="connect_db">
			<return type="int" enum="MariaDBConnector.ErrorCode" />
			<param index="0" name="hostname" type="String" />
			<param index="1" name="port" type="int" />
			<param index="2" name="database" type="String" />
			<param index="3" name="username" type="String" />
			<param index="4" name="password" type="String" />
			<param index="5" name="authtype" type="int" enum="MariaDBConnector.AuthType" default="0" />
			<param index="6" name="is_prehashed" type="bool" default="true" />
			<description>
				Establishes a connection to the MariaDB server using the provided host, port, database name, username, and password.
				[codeblocks]
					If is_prehashed = true then
				    If authtype = AUTH_TYPE_MYSQL_NATIVE, the password string must be sha1 hex hash of the plain password.
				    If authtype = AUTH_TYPE_ED25519, the password string must be sha512 hex hash of the plain password.
				[/codeblocks]
				[codeblocks]
				[gdscript]
				var err: MariaDBConnector.ErrorCode = db.connect_db(
				    "localhost",
				    3306,
				    "some_db_name",
				    "some_username",
				    "db_users_password_sha512_hex_string_hash",
				    MariaDBConnector.AUTH_TYPE_ED25519,
				    true)

				if err != MariaDBConnector.ErrorCode.OK:
				    push_error(err)
				    return
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="connect_db_ctx">
			<return type="int" enum="MariaDBConnector.ErrorCode" />
			<param index="0" name="mariadb_connect_context" type="MariaDBConnectContext" />
			<description>
				Establishes a connection to the MariaDB server using a context.
				[codeblocks]
				[gdscript]
				var ctx := MariaDBConnectContext.new()
				# Using defaults for unlisted member variables.
				ctx.db_name = "some_db"
				ctx.username = "some_db_user"
				ctx.password = "db_users_password_sha512_base64_encoded_hash"

				var db :=  MariaDBConnector.new()
				var err: MariaDBConnector.ErrorCode = db.connect_db_ctx(ctx)
				if err != MariaDBConnector.ErrorCode.OK:
				    push_error(err)
				    return
				[/gdscript]
				[/codeblock]
			</description>
		</method>
		<method name="connection_instance" qualifiers="static">
			<return type="MariaDBConnector" />
			<param index="0" name="mariadb_connect_context" type="MariaDBConnectContext" />
			<description>
				Static member that returns a connected MariaDBConnector instance or null.
				[codeblocks]
				[gdscript]
				var ctx := MariaDBConnectContext.new()
				# Using defaults for unlisted member variables.
				ctx.db_name = "some_db"
				ctx.username = "some_db_user"
				ctx.password = "db_users_password_sha512_base64_encoded_hash"

				var db := MariaDBConnector.connection_instance(ctx)
				if db == null:
				    # Error is already printed by the addon.
				    return
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="disconnect_db">
			<return type="void" />
			<description>
				Disconnects from the current database session.
			</description>
		</method>
		<method name="execute_command">
			<return type="Dictionary" />
			<param index="0" name="sql_stmt" type="String" />
			<description>
				Returns a [Dictionary] with the affected_rows, last_insert_id, status_flags, warnings, and info for all none SELECT command types like INSERT, UPDATE, DELETE, BEGIN, COMMIT and ROLLBACK.
				[codeblocks]
				[gdscript]
				var stmt: String = "INSERT INTO table_name (val) VALUES (1234);"
				var res: Dictionary = db.execute_command(stmt)
				if db.last_error != MariaDBConnector.ErrorCode.OK:
				    printerr("Error %d on INSERT" % [db.last_error]) 
				else:
				    print("rows affected:", res["affected_rows"])
				    print("Last Inserted ID:", res["last_insert_id"])
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="get_last_error" qualifiers="const">
			<return type="int" enum="MariaDBConnector.ErrorCode" />
			<description>
				Getter for last_error, use to check for OK or ErrorCode on last funtion.
			</description>
		</method>
		<method name="get_last_query_converted">
			<return type="PackedByteArray" />
			<description>
				Returns the converted form of the last query, suitable for debugging or re-sending.
			</description>
		</method>
		<method name="get_last_response">
			<return type="PackedByteArray" />
			<description>
				Returns the raw response buffer from the last server response.
			</description>
		</method>
		<method name="get_last_transmitted">
			<return type="PackedByteArray" />
			<description>
				Returns the last transmitted packet buffer sent to the server.
			</description>
		</method>
		<method name="ping_srvr">
			<return type="void" />
			<description>
				Sends a ping command to the MariaDB server to keep the connection alive.
			</description>
		</method>
		<method name="prep_stmt">
			<return type="Dictionary" />
			<param index="0" name="sql" type="String" />
			<description>
				Creates and stores a prepared statement ti be reuses by the returned statement_id.
				[color=yellow][b]Note:[/b][/color] Prepared statements are [b]less efficient[/b] than regular queries when not being reused within and [b]only[/b] within the same connection instance.
			</description>
		</method>
		<method name="prep_stmt_close">
			<return type="int" enum="MariaDBConnector.ErrorCode" />
			<param index="0" name="stmt_id" type="int" />
			<description>
				Removes a stored prepared statement.
			</description>
		</method>
		<method name="prep_stmt_exec_cmd">
			<return type="Dictionary" />
			<param index="0" name="stmt_id" type="int" />
			<param index="1" name="params" type="Dictionary[]" />
			<description>
				Excecutes a command (INSERT, UPDATE, DELETE, BEGIN, ROLLBACK, COMMIT, ETC) type prepared_statement that expect a status resopnse. The params are passes using an [Array][[Dictionary]] with each index having [FieldType] as a key and the parameter value as value.
				[color=yellow][b]Note:[/b][/color] Prepared statements are [b]less efficient[/b] than regular queries when not being reused within and [b]only[/b] within the same connection instance.
				[codeblocks]
				[gdscript]
				var ctx: MariaDBConnectContext = MariaDBConnectContext.new()
				# Using defaults for unlisted member variables.
				ctx.db_name = "some_db"
				ctx.username = "some_db_user"
				ctx.password = "db_users_password_sha512_base64_encoded_hash"

				var ctx_db: MariaDBConnector = MariaDBConnector.connection_instance(ctx)
				if ctx_db == null:
				    # Error is already printed by the addon.
				    return

				var stmt: String = "UPDATE table_name SET `varchar` = ? WHERE `utiny` = ?;"	
				var d_res: Dictionary  = ctx_db.prepared_statement(stmt)
				if ctx_db.last_error == MariaDBConnector.OK:
				    print(d_res)
				    var prepped_params: Array[Dictionary] = [
				        {MariaDBConnector.FT_VARCHAR: "changed"},
				        {MariaDBConnector.FT_TINYINT_U: 3},
				        ];
					var status: Dictionary = ctx_db.exec_prepped_command(d_res["statement_id"], prepped_params)
					if ctx_db.last_error == MariaDBConnector.OK:
					    print(status)
					else:
					    printerr("Error %d on exe_prep_select id:%d" % [ctx_db.last_error, int(d_res["statement_id"])])
				else:
					printerr("Error %d on preppared ststement %s!" % [ctx_db.last_error, stmt])

				print()
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="prep_stmt_exec_select">
			<return type="Dictionary[]" />
			<param index="0" name="stmt_id" type="int" />
			<param index="1" name="params" type="Dictionary[]" />
			<description>
				Excecutes a SELECT type prepared_statement. The params are passes using an [Array][[Dictionary]] with each index having [FieldType] as a key and the parameter value as value.
				[color=yellow][b]Note:[/b][/color] Prepared statements are [b]less efficient[/b] than regular queries when not being reused within and [b]only[/b] within the same connection instance.
				[codeblocks]
				[gdscript]
				var ctx: MariaDBConnectContext = MariaDBConnectContext.new()
				# Using defaults for unlisted membe variables.
				ctx.db_name = "some_db"
				ctx.username = "some_db_user"
				ctx.password = "db_users_password_sha512_base64_encoded_hash"

				var ctx_db: MariaDBConnector = MariaDBConnector.connection_instance(ctx)
				if ctx_db == null:
				    # Error is already printed by the addon.
				    return

				var stmt: String = "SELECT * FROM table_name WHERE uint = ? LIMIT 1;"	
				var d_res: Dictionary  = ctx_db.prepared_statement(stmt)
				if ctx_db.last_error == MariaDBConnector.OK:
				    print(d_res)
				    var prepped_params: Array[Dictionary] = [{MariaDBConnector.FieldType.FT_INT_U: 1}];
				    var status: Dictionary = ctx_db.exec_prepped_command(d_res["statement_id"], prepped_params)
				    if ctx_db.last_error == MariaDBConnector.OK:
				        print(status)
				    else:
				        printerr("Error %d on exe_prep_select id:%d" % [ctx_db.last_error, int(d_res["statement_id"])])
				else:
				    printerr("Error %d on preppared ststement %s!" % [ctx_db.last_error, stmt])

				print()
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="query">
			<return type="Variant" />
			<param index="0" name="sql_stmt" type="String" />
			<description>
				Executes the given SQL statement against the connected database. The result of the query could be ErrorCode or [Array][[Dictionary]], for SELECT only, depending on the statement.
			</description>
		</method>
		<method name="select_query">
			<return type="Dictionary[]" />
			<param index="0" name="sql_stmt" type="String" />
			<description>
				Strict typed return of [Array][[Dictionary]] instead of Variant, use last_error to check for error.
				[codeblocks]
				[gdscript]
				var stmt: String = "SELECT * FROM table_name;"
				var rows: Array[Dictionary] = db.select_query(stmt)
				if db.last_error == MariaDBConnector.ErrorCode.OK:
				    for row:Dictionary in rows:
				        print("row:", row)
				else:
				    printerr("Error %d on sSELECT" % [db.last_error])
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="set_db_name">
			<return type="void" />
			<param index="0" name="db_name" type="String" />
			<description>
				Sets or changes the database name to use for subsequent queries, use if databsae needs to be changed on an established connection.
			</description>
		</method>
		<method name="set_dbl_to_string">
			<return type="void" />
			<param index="0" name="is_to_str" type="bool" />
			<description>
				If true, floating-point values will be returned as [String] to preserve precision.
			</description>
		</method>
		<method name="set_ip_type">
			<return type="void" />
			<param index="0" name="type" type="int" enum="MariaDBConnector.IpType" />
			<description>
				Change the IpType for DNS and connections, some networks may require IPV4 or IPV6 specifically.
			</description>
		</method>
		<method name="set_server_timeout">
			<return type="void" />
			<param index="0" name="msec" type="int" default="1000" />
			<description>
				Change the error delay to receive data from the MariaDB server. There are several checks to ensure the buffer size matches packet length codes, this delay can be cumulative for each packet length code sent from the MariaDB server, use with caution.
			</description>
		</method>
	</methods>
	<members>
		<member name="is_connected_db" type="bool" setter="" getter="is_connected_db" default="false">
			True if client is still conneced to the MariaDB server, this is not 100%, sometimes, when timeout occurs (about ~20min), MariaiDB will drop a connection without closing the socket.
		</member>
		<member name="last_error" type="int" setter="" getter="get_last_error_code" enum="MariaDBConnector.ErrorCode" default="0">
			Holds the ErrorCode of the last function and updated on every function call.
		</member>
	</members>
	<constants>
		<constant name="IP_TYPE_IPV4" value="1" enum="IpType">
		</constant>
		<constant name="IP_TYPE_IPV6" value="2" enum="IpType">
		</constant>
		<constant name="IP_TYPE_ANY" value="3" enum="IpType">
		</constant>
		<constant name="AUTH_TYPE_ED25519" value="0" enum="AuthType">
		</constant>
		<constant name="AUTH_TYPE_MYSQL_NATIVE" value="1" enum="AuthType">
		</constant>
		<constant name="OK" value="0" enum="ErrorCode">
		</constant>
		<constant name="ERR_NO_RESPONSE" value="49" enum="ErrorCode">
		</constant>
		<constant name="ERR_NOT_CONNECTED" value="50" enum="ErrorCode">
		</constant>
		<constant name="ERR_PACKET_LENGTH_MISMATCH" value="51" enum="ErrorCode">
		</constant>
		<constant name="ERR_SERVER_PROTOCOL_INCOMPATIBLE" value="52" enum="ErrorCode">
		</constant>
		<constant name="ERR_CLIENT_PROTOCOL_INCOMPATIBLE" value="53" enum="ErrorCode">
		</constant>
		<constant name="ERR_SEQUENCE_MISMATCH" value="54" enum="ErrorCode">
		</constant>
		<constant name="ERR_AUTH_PLUGIN_NOT_SET" value="55" enum="ErrorCode">
		</constant>
		<constant name="ERR_AUTH_PLUGIN_INCOMPATIBLE" value="56" enum="ErrorCode">
		</constant>
		<constant name="ERR_AUTH_FAILED" value="57" enum="ErrorCode">
		</constant>
		<constant name="ERR_USERNAME_EMPTY" value="58" enum="ErrorCode">
		</constant>
		<constant name="ERR_PASSWORD_EMPTY" value="59" enum="ErrorCode">
		</constant>
		<constant name="ERR_DB_NAME_EMPTY" value="60" enum="ErrorCode">
		</constant>
		<constant name="ERR_PASSWORD_HASH_LENGTH" value="61" enum="ErrorCode">
		</constant>
		<constant name="ERR_INVALID_HOSTNAME" value="62" enum="ErrorCode">
		</constant>
		<constant name="ERR_CONNECTION_ERROR" value="63" enum="ErrorCode">
		</constant>
		<constant name="ERR_INIT_ERROR" value="64" enum="ErrorCode">
		</constant>
		<constant name="ERR_UNAVAILABLE" value="65" enum="ErrorCode">
		</constant>
		<constant name="ERR_PROTOCOL_MISMATCH" value="66" enum="ErrorCode">
		</constant>
		<constant name="ERR_AUTH_PROTOCOL_MISMATCH" value="67" enum="ErrorCode">
		</constant>
		<constant name="ERR_SEND_FAILED" value="68" enum="ErrorCode">
		</constant>
		<constant name="ERR_INVALID_PORT" value="69" enum="ErrorCode">
		</constant>
		<constant name="ERR_UNKNOWN" value="70" enum="ErrorCode">
		</constant>
		<constant name="ERR_PACKET" value="71" enum="ErrorCode">
		</constant>
		<constant name="ERR_PREPARE_FAILED" value="73" enum="ErrorCode">
		</constant>
		<constant name="FT_TINYINT" value="0" enum="FieldType">
		</constant>
		<constant name="FT_TINYINT_U" value="1" enum="FieldType">
		</constant>
		<constant name="FT_SHORT" value="2" enum="FieldType">
		</constant>
		<constant name="FT_SHORT_U" value="3" enum="FieldType">
		</constant>
		<constant name="FT_INT" value="4" enum="FieldType">
		</constant>
		<constant name="FT_INT_U" value="5" enum="FieldType">
		</constant>
		<constant name="FT_FLOAT" value="6" enum="FieldType">
		</constant>
		<constant name="FT_DOUBLE" value="7" enum="FieldType">
		</constant>
		<constant name="FT_TIMESTAMP" value="8" enum="FieldType">
		</constant>
		<constant name="FT_BIGINT" value="9" enum="FieldType">
		</constant>
		<constant name="FT_BIGINT_U" value="10" enum="FieldType">
		</constant>
		<constant name="FT_MEDIUMINT" value="11" enum="FieldType">
		</constant>
		<constant name="FT_MEDIUMINT_U" value="12" enum="FieldType">
		</constant>
		<constant name="FT_DATE" value="13" enum="FieldType">
		</constant>
		<constant name="FT_TIME" value="14" enum="FieldType">
		</constant>
		<constant name="FT_DATETIME" value="15" enum="FieldType">
		</constant>
		<constant name="FT_YEAR" value="16" enum="FieldType">
		</constant>
		<constant name="FT_NEWDATE" value="17" enum="FieldType">
		</constant>
		<constant name="FT_VARCHAR" value="18" enum="FieldType">
		</constant>
		<constant name="FT_BIT" value="19" enum="FieldType">
		</constant>
		<constant name="FT_JSON" value="20" enum="FieldType">
		</constant>
		<constant name="FT_DECIMAL" value="21" enum="FieldType">
		</constant>
		<constant name="FT_ENUM" value="22" enum="FieldType">
		</constant>
		<constant name="FT_SET" value="23" enum="FieldType">
		</constant>
		<constant name="FT_TINYBLOB" value="24" enum="FieldType">
		</constant>
		<constant name="FT_MEDIUMBLOB" value="25" enum="FieldType">
		</constant>
		<constant name="FT_LONGBLOB" value="26" enum="FieldType">
		</constant>
		<constant name="FT_BLOB" value="27" enum="FieldType">
		</constant>
		<constant name="FT_VAR_STRING" value="28" enum="FieldType">
		</constant>
		<constant name="FT_STRING" value="29" enum="FieldType">
		</constant>
		<constant name="FT_GEOMETRY" value="30" enum="FieldType">
		</constant>
	</constants>
</class>

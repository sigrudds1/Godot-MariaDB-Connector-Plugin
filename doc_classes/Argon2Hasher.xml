<?xml version="1.0" encoding="UTF-8"?>
<class name="Argon2Hasher" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A lightweight wrapper for the PHC Winner Argon2 hashing algorithm.
	</brief_description>
	<description>
		Argon2Hasher is a GDExtension class that wraps the Argon2 hashing algorithm, providing a configurable interface for secure password hashing and verification.
		It was added to the MariaDBConnector addon to support password hashing and salt generation for user authentication systems.
		However, it can also be used independently for any case requiring secure key derivation or hashing.
		The class supports setting memory cost, time cost (iterations), parallelism (threads), and salt length. It generates cryptographically secure salts and returns all outputs in base64-encoded format for easy storage in databases.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="generate_b64_salt">
			<return type="String" />
			<description>
				Generates a new base64-encoded salt using cryptographically secure random bytes.
				The salt length is defined by the current internal configuration.
			</description>
		</method>

		<method name="hash_password_with_salt">
			<return type="String" />
			<param index="0" name="password" type="String" />
			<param index="1" name="base64_salt" type="String" />
			<description>
				Hashes the given password using the provided base64-encoded salt and current Argon2 parameters.
				Returns the resulting hash encoded as base64.
			</description>
		</method>

		<method name="verify_password_with_salt">
			<return type="bool" />
			<param index="0" name="password" type="String" />
			<param index="1" name="base64_salt" type="String" />
			<param index="2" name="base64_hash" type="String" />
			<description>
				Verifies a password against a previously stored base64-encoded salt and hash.
				Returns true if the password is valid; false otherwise.
			</description>
		</method>

		<method name="set_memory_cost">
			<return type="void" />
			<param index="0" name="memory_kib" type="int" />
			<description>
				Sets the memory usage for the Argon2 algorithm in kibibytes (1 KiB = 1024 bytes).
				Higher memory cost improves resistance against GPU-based attacks.
			</description>
		</method>

		<method name="set_time_cost">
			<return type="void" />
			<param index="0" name="iterations" type="int" />
			<description>
				Sets the number of iterations (time cost) for the Argon2 algorithm.
				Higher values increase the computational time required to compute a hash.
			</description>
		</method>

		<method name="set_parallelism">
			<return type="void" />
			<param index="0" name="threads" type="int" />
			<description>
				Sets the number of parallel threads to use for hashing.
				Can improve performance on multi-core systems.
			</description>
		</method>

		<method name="set_salt_length">
			<return type="void" />
			<param index="0" name="bytes" type="int" />
			<description>
				Sets the number of random bytes used when generating a salt.
				The resulting salt will be base64-encoded for storage.
			</description>
		</method>
	</methods>
</class>
